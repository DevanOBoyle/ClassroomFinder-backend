/**
 * Ideas for the design of the database (if we are doing some SQL-based DB).
 * Written according to PostgreSQL, but generic enough to be understood w/out using Postgres.
 */

/**
 * Notes:
 * - This website contains some information regarding classrooms; maybe scrape it:
 *   https://its.ucsc.edu/classrooms/
 */

/**
 * This table uses Google place IDs, which provide all the information we need.
 * Rooms are located in buildings; a building contains many rooms.
 *
 * Columns:
 *     id is an integer used as a primary key.
 *     placeid is the PlaceID generated by Google.
 */
CREATE TABLE IF NOT EXISTS Buildings (
    id INTEGER,
    placeid VARCHAR(255),
    PRIMARY KEY (id),
    UNIQUE (placeid)
);

/**
 * The actual room within a building.
 *
 * Columns:
 *     id is an integer used as a primary key.
 *     building is the building ID that the room is located in. Required.
 *     num is the room number. Required.
 *     floor is the floor that the room is located on. Required, defaults to 1.
 *
 * Constraints:
 *     A building ID must reference a building ID from Buildings.
 */
CREATE TABLE IF NOT EXISTS Rooms (
    id INTEGER,
    building INTEGER NOT NULL,
    num VARCHAR(10) NOT NULL,
    floor INTEGER NOT NULL DEFAULT 1,
    PRIMARY KEY (id),
    FOREIGN KEY (building) REFERENCES Buildings(id)
        ON DELETE CASCADE
);

/**
 * Some rooms have abbreviations (ex. Porter Academic is Porter Acad.).
 * Store the abbreviation mappings here.
 *
 * Columns:
 *     building is the building ID that the room is located in. Required.
 *     abbrev is the abbreviated text that corresponds to a building. Required.
 *
 * Constraints:
 *     A building ID must reference a building ID from Buildings.
 */
CREATE TABLE IF NOT EXISTS BuildingAbbreviations (
    building INTEGER,
    abbrev VARCHAR(255),
    PRIMARY KEY (building, abbrev),
    FOREIGN KEY (building) REFERENCES Buildings(id)
        ON DELETE CASCADE
);
